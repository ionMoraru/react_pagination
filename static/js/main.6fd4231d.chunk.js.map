{"version":3,"sources":["components/Posts.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Posts","_ref","loading","posts","react_default","a","createElement","className","map","post","key","id","title","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","onClick","href","App","_useState","useState","_useState2","Object","slicedToArray","setPosts","_useState3","_useState4","setLoading","_useState5","_useState6","currentPage","setCurrentPage","_useState7","_useState8","setPostsPerPage","useEffect","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","apply","this","arguments","fetsPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","type","class","concat","components_Posts","components_Pagination","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fd4231d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Posts = ({ loading, posts }) => {\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n  return (\n    <ul className=\"list-group mb-4\">\n      {posts.map(post => {\n        return (\n          <li key={post.id} className=\"list-group-item\">\n            {post.title}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default Posts;\n","import React from \"react\";\n\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n  return (\n    <nav>\n      <ul className=\"pagination\">\n        {pageNumbers.map(number => (\n          <li key={number} className=\"page-item\">\n            <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\n              {number}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Posts from \"./components/Posts\";\nimport Pagination from \"./components/Pagination\";\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n\n  useEffect(() => {\n    const fetsPosts = async () => {\n      setLoading(true);\n      const res = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\n      setPosts(res.data);\n      setLoading(false);\n    };\n    fetsPosts();\n  }, []);\n\n  // Get current posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  // Set current page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-primary mb-3\">My Blog</h1>\n      <button\n        type=\"button\"\n        class=\"btn btn-light mb-5\"\n        onClick={() => setPostsPerPage(postsPerPage === 10 ? 5 : 10)}\n      >{`${postsPerPage === 10 ? 5 : 10} Posts per Page`}</button>\n      <Posts posts={currentPosts} loading={loading} />\n      <Pagination\n        postsPerPage={postsPerPage}\n        totalPosts={posts.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}